package com.dyw.client.service;

import com.dyw.client.HCNetSDK;
import com.sun.jna.Native;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.examples.win32.W32API.HWND;

import com.sun.jna.ptr.IntByReference;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Calendar;
import java.util.Date;
import java.util.Timer;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/*****************************************************************************
 *类 ：JDialogPlayBackByTime
 *类描述 ：远程按时间回放操作
 ****************************************************************************/
public class PlaybackService extends javax.swing.JDialog {
    private java.awt.Panel panelPlay;
    static HCNetSDK hCNetSDK = HCNetSDK.INSTANCE;
    private NativeLong m_lUserID;//用户ID
    private NativeLong m_lPlayHandle;//播放句柄
    private NativeLong m_lLoadHandle;//下载句柄
    private String m_sDeviceIP;//设备IP
    private int m_iChanShowNum;//回放通道
    private boolean m_bPause;//是否已暂停
    private Timer Playbacktimer;//回放用定时器

    /*
     * 构造函数
     * */
    public PlaybackService(java.awt.Frame parent, boolean modal, NativeLong lUserID, String sIP) {
        super(parent, modal);
        initComponents();
        initialDialog();
        m_lUserID = lUserID;
        m_lPlayHandle = new NativeLong(-1);
        m_lLoadHandle = new NativeLong(-1);
        m_iChanShowNum = 0;
        m_sDeviceIP = sIP;
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        panelPlay = new java.awt.Panel();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("按时间回放");
        panelPlay.setBackground(new java.awt.Color(234, 255, 255));

        javax.swing.GroupLayout panelPlayLayout = new javax.swing.GroupLayout(panelPlay);
        panelPlay.setLayout(panelPlayLayout);
        panelPlayLayout.setHorizontalGroup(
                panelPlayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 520, Short.MAX_VALUE)
        );
        panelPlayLayout.setVerticalGroup(
                panelPlayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 378, Short.MAX_VALUE)
        );
    }

    /*************************************************
     函数:      "退出"  按钮单击相应函数
     函数描述:  销毁对话框
     *************************************************/
    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {
        StopPlay();
        dispose();
    }

    /*
     * 开始或暂停按时间回放
     * */
    private void playOrPause() {
        HCNetSDK.NET_DVR_TIME struStartTime;
        HCNetSDK.NET_DVR_TIME struStopTime;
        if (m_lPlayHandle.intValue() == -1) {
            m_iChanShowNum = Integer.parseInt(jTextFieldChanNum.getText());//回放通道
            struStartTime = new HCNetSDK.NET_DVR_TIME();
            struStopTime = new HCNetSDK.NET_DVR_TIME();
            struStartTime.dwYear = Integer.parseInt(jTextFieldsYear.getText());//开始时间
            struStartTime.dwMonth = Integer.parseInt(jTextFieldsMonth.getText());
            struStartTime.dwDay = Integer.parseInt(jTextFieldsDay.getText());
            struStartTime.dwHour = Integer.parseInt(jTextFieldsHour.getText());
            struStartTime.dwMinute = Integer.parseInt(jTextFieldsMinute.getText());
            struStartTime.dwSecond = Integer.parseInt(jTextFieldsSecond.getText());
            struStopTime.dwYear = Integer.parseInt(jTextFieldeYear.getText());//结束时间
            struStopTime.dwMonth = Integer.parseInt(jTextFieldeMonth.getText());
            struStopTime.dwDay = Integer.parseInt(jTextFieldeDay.getText());
            struStopTime.dwHour = Integer.parseInt(jTextFieldeHour.getText());
            struStopTime.dwMinute = Integer.parseInt(jTextFieldeMinute.getText());
            struStopTime.dwSecond = Integer.parseInt(jTextFieldeSecond.getText());
            //获取窗口句柄
            HWND hwnd = new HWND();
            hwnd.setPointer(Native.getComponentPointer(panelPlay));
            m_lPlayHandle = hCNetSDK.NET_DVR_PlayBackByTime(m_lUserID, new NativeLong(m_iChanShowNum), struStartTime, struStopTime, hwnd);
            if (m_lPlayHandle.intValue() == -1) {
                JOptionPane.showMessageDialog(this, "按时间回放失败");
                return;
            } else {
                //还要调用该接口才能开始回放
                hCNetSDK.NET_DVR_PlayBackControl(m_lPlayHandle, HCNetSDK.NET_DVR_PLAYSTART, 0, null);
                System.out.println("开始回放");
            }
            //开始计时器
            Playbacktimer = new Timer();//新建定时器
            Playbacktimer.schedule(new PlaybackTask(), 0, 5000);//0秒后开始响应函数
        } else {
            if (m_bPause) {
                if (hCNetSDK.NET_DVR_PlayBackControl(m_lPlayHandle, HCNetSDK.NET_DVR_PLAYRESTART, 0, null)) {
                    System.out.println("Start");
                    m_bPause = false;
                }
            } else {
                if (hCNetSDK.NET_DVR_PlayBackControl(m_lPlayHandle, HCNetSDK.NET_DVR_PLAYPAUSE, 0, null)) {
                    System.out.println("Pause");
                    m_bPause = true;
                }
            }
        }
    }

    /*************************************************
     函数:      initialDialog
     函数描述:   初始化Dialog
     *************************************************/
    private void initialDialog() {
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                StopPlay();
            }
        });
    }

    /*
     * 回放定时器响应函数
     * */
    class PlaybackTask extends java.util.TimerTask {
        //定时器函数
        @Override
        public void run() {
            IntByReference nPos = new IntByReference(0);
            if (m_lPlayHandle.intValue() >= 0) {
                if (hCNetSDK.NET_DVR_PlayBackControl(m_lPlayHandle, HCNetSDK.NET_DVR_PLAYGETPOS, 0, nPos)) {
                    System.out.println("回放进度" + nPos.getValue());
                } else {
                    System.out.println("获取回放进度失败");
                }

                if (nPos.getValue() > 100) {
                    StopPlay();
                    JOptionPane.showMessageDialog(null, "由于网络原因或DVR忙,回放异常终止!");
                }
                if (nPos.getValue() == 100) {
                    StopPlay();
                    JOptionPane.showMessageDialog(null, "按时间回放结束");
                }
            }
        }
    }

    /*
     * 停止回放的相关操作
     * */
    private void StopPlay() {
        if (m_lPlayHandle.intValue() >= 0) {
            hCNetSDK.NET_DVR_PlayBackControl(m_lPlayHandle, HCNetSDK.NET_DVR_PLAYSTOPAUDIO, 0, null);
            hCNetSDK.NET_DVR_StopPlayBack(m_lPlayHandle);
            m_lPlayHandle.setValue(-1);
            Playbacktimer.cancel();
            panelPlay.repaint();
        }
    }
}

